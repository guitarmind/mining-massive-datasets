{
    "contents" : "\nassignment5_markpeng <- function() {\n  # Read dataset\n  filePath <- \"E:/VM/Share/datasci_course_materials/assignment5/seaflow_21min.csv\"\n  data <- read.csv(filePath, header=TRUE)\n  print(paste('nrows:',nrow(data)))  \n  print(paste('ncol:',ncol(data)))\n  \n  filteredData <- subset(data, !(file_id==208))\n\n  # Get all distinct class labels\n  popClasses <- unique(as.factor(filteredData$pop))\n  # print(popClasses)\n  # summary(data)\n  \n  # Create training and testing dataset\n  trainIndex <- createDataPartition(filteredData$pop, p=0.5, list=FALSE, times=1)\n  # head(trainIndex)\n  trainingData <- filteredData[trainIndex,]\n  testingData <- filteredData[-trainIndex,]\n  print(paste('training nrows:',nrow(trainingData)))  \n  print(paste('training ncol:',ncol(trainingData)))\n  print(paste('testingData nrows:',nrow(testingData)))  \n  print(paste('testingData ncol:',ncol(testingData)))\n  \n  trainingTimeMean <- mean(trainingData$time, na.rm=TRUE)\n  print(paste('Mean of time in training data:', trainingTimeMean))\n  \n  # Save ggplot() as object\n  # graph <- ggplot(data=trainingData, aes(x=pe,y=chl_small,colour=pop))\n  # Add graph to geom_line()\n  # graph + geom_line()\n  # print(head(trainingData, 50))\n  # summary(trainingData)\n  \n  ##############################################################\n  ## Train a decision tree\n  \n  # Create a formula from a string\n  fol <- as.formula(\"pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small\")\n  # fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)\n  model <- rpart(fol, method=\"class\", data=trainingData)\n  # print(model)\n  \n  \n  # Evaluate the decision tree on the test data\n  predictions <- predict(model, newdata=testingData, type=\"class\")\n  # print(typeof(predictions))\n  # print(head(predictions, 5))\n  output <- (predictions == testingData$pop)\n  # print(head(output, 50))\n  # correct_num <- length(output[output==TRUE])\n  correct_num <- sum(output, na.rm=TRUE)\n  print(paste('correct_num:',correct_num))\n  \n  # Compute testing accuracy\n  test_accuracy <- correct_num / nrow(testingData)\n  print(paste('decision tree test_accuracy:',test_accuracy))\n  \n  print(table(pred=predictions, true=testingData$pop))\n  \n  ##############################################################\n  ## Build and evaluate a random forest\n  model <- randomForest(fol, method=\"class\", data=trainingData)\n  predictions <- predict(model, newdata=testingData, type=\"class\")\n  \n  output <- (predictions == testingData$pop)\n  correct_num <- sum(output, na.rm=TRUE)\n  print(paste('correct_num:',correct_num))\n  \n  # Compute testing accuracy\n  test_accuracy <- correct_num / nrow(testingData)\n  print(paste('random forest test_accuracy:', test_accuracy))\n  \n  print(table(pred=predictions, true=testingData$pop))\n  \n  # Compute model importance for gini impurity measure\n  # importance(model)\n\n  ##############################################################\n  # Train a support vector machine model\n  model <- svm(fol, method=\"class\", data=trainingData)\n  predictions <- predict(model, newdata=testingData, type=\"class\")\n  \n  output <- (predictions == testingData$pop)\n  correct_num <- sum(output, na.rm=TRUE)\n  print(paste('correct_num:',correct_num))\n  \n  # Compute testing accuracy\n  test_accuracy <- correct_num / nrow(testingData)\n  print(paste('svm test_accuracy:', test_accuracy))\n  \n  print(table(pred=predictions, true=testingData$pop))\n}\n\n# main()\nlibrary(\"caret\")\nlibrary(\"rpart\")\nlibrary(\"randomForest\")\nlibrary(\"e1071\")\nset.seed(1)\nassignment5_markpeng()\n\n",
    "created" : 1412938581952.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "51153849",
    "id" : "DC9521F3",
    "lastKnownWriteTime" : 1408289384,
    "path" : "E:/VM/Share/datasci_course_materials/assignment5/assignment5.r",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}